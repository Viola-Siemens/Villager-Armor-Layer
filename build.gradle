buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
        maven { name="sponge"; url 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.32'
    }
}
apply plugin: 'net.minecraftforge.gradle'

apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: 'org.spongepowered.mixin'

version = '4.0.0'
group = 'com.hexagram2021.villagerarmor'
archivesBaseName = 'villagerarmor'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.19'
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=villagerarmor.mixins.json"

            mods {
                villagerarmor {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'
            arg "-mixin.config=villagerarmor.mixins.json"

            mods {
                villagerarmor {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'villagerarmor', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            arg "-mixin.config=villagerarmor.mixins.json"

            mods {
                villagerarmor {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // TOP
        url "https://cursemaven.com"
    }
    maven { //mirror
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19-41.1.0'

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title"	: "Villager Armor Layer",
            "Specification-Vendor"	: "Hexagram",
            "Specification-Version"	: "1", // We are version 1 of ourselves
            "Implementation-Title"	: project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor"	: "Hexagram",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

mixin {
    add sourceSets.main, 'villagerarmor.refmap.json'
    config 'villagerarmor.mixins.json'

    debug.verbose = true
    debug.export = true
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
